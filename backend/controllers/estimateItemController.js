const model = require('../models/estimateItemModel');
const logHistory = require('../utils/logHistory');

// üîπ –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
exports.create = async (req, res) => {
  try {
    const { estimate_id, name, unit, price, quantity, category } = req.body;
    if (!estimate_id || !name || !unit || !price || !category) {
      return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    const id = await model.createItem({ estimate_id, name, unit, price, quantity, category });
    await logHistory('estimate_item', id, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', req.user.id);

    res.status(201).json({ id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–º–µ—Ç–µ
exports.getByEstimate = async (req, res) => {
  try {
    const estimateId = req.params.estimateId;
    const items = await model.getItemsByEstimate(estimateId);
    res.json(items);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
exports.update = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, unit, price, quantity, category } = req.body;

    await model.updateItem({ id, name, unit, price, quantity, category });
    await logHistory('estimate_item', id, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', req.user.id);

    res.json({ message: '–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
exports.remove = async (req, res) => {
  try {
    const { id } = req.params;
    await model.deleteItem(id);
    await logHistory('estimate_item', id, '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', req.user.id);
    res.json({ message: '–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
