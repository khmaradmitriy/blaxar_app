const taskModel = require('../models/taskModel');

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞
exports.getActiveByWorker = async (req, res) => {
  try {
    const tasks = await taskModel.getActiveTasksByWorker(req.user.id);
    res.json(tasks);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á' });
  }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞
exports.getAllByWorker = async (req, res) => {
  try {
    const tasks = await taskModel.getAllByWorker(req.user.id);
    res.json(tasks);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á' });
  }
};

// üîπ –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫ –±–µ—Ä–µ—Ç –∑–∞–¥–∞—á—É
exports.takeTask = async (req, res) => {
  try {
    const active = await taskModel.getActiveTasksByWorker(req.user.id);
    if (active.length >= 3) {
      return res.status(400).json({ message: '–£ –≤–∞—Å —É–∂–µ 3 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏' });
    }

    const available = await taskModel.getAvailableTasks();
    if (!available.length) {
      return res.status(404).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á' });
    }

    const task = available[0];
    await taskModel.assignTask(task.id, req.user.id, true);
    res.json({ message: '–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞', task });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è' });
  }
};

// üîπ –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∑–∞–¥–∞—á–∏
exports.refuseTask = async (req, res) => {
  const { taskId } = req.body;

  try {
    const task = await taskModel.getById(taskId);
    if (!task || task.worker_id !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–µ' });
    }

    await taskModel.refuseTask(taskId);
    res.json({ message: '–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ' });
  }
};

// üîπ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –æ—Ç –∏–º–µ–Ω–∏ –ø—Ä–æ—Ä–∞–±–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
exports.assignByForeman = async (req, res) => {
  const { taskId, workerId } = req.body;

  if (!taskId || !workerId) {
    return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã taskId –∏ workerId' });
  }

  try {
    await taskModel.assignTask(taskId, workerId, false);
    res.json({ message: '–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' });
  }
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
exports.updateStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;

  const allowedStatuses = ['created', 'in_progress', 'on_review', 'approved', 'revision', 'paid'];
  if (!allowedStatuses.includes(status)) {
    return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å' });
  }

  try {
    await taskModel.updateStatus(id, status);
    res.json({ message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};
