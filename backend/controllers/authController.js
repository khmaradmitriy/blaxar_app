const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const pool = require('../config/db');
const { jwtSecret, refreshSecret, tokenExpire, refreshExpire } = require('../config/jwt');

const refreshTokens = new Set();

exports.getMe = async (req, res) => {
  try {
    const [rows] = await pool.execute(`
      SELECT id, email, surname, name, patronymic, birth_date, role, created_at
      FROM Users
      WHERE id = ?
    `, [req.user.id]);

    if (rows.length === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(rows[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
exports.register = async (req, res) => {
  const { email, password, surname, name, patronymic, birth_date, role } = req.body;

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (!email || !password) {
    return res.status(400).json({ message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' });
  }

  if (password.length < 6) {
    return res.status(400).json({ message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è email
    const [existing] = await pool.execute('SELECT id FROM Users WHERE email = ?', [email]);
    if (existing.length > 0) {
      return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.' });
    }

    const hashed = await bcrypt.hash(password, 10);

    await pool.execute(`
      INSERT INTO Users (email, surname, name, patronymic, birth_date, role, password_hash)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [email, surname || '', name || '', patronymic || '', birth_date || null, role || 'worker', hashed]);

    res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email });

  try {
    const [rows] = await pool.execute('SELECT * FROM Users WHERE email = ?', [email]);
    console.log('üë§ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', rows.length);

    if (rows.length === 0) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const user = rows[0];
    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
    if (user.is_blocked) {
  console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  return res.status(403).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' });
}
    const { accessToken, refreshToken } = generateTokens({ id: user.id, role: user.role });

    res.json({
      accessToken,
      refreshToken,
      user: { id: user.id, role: user.role, email: user.email },
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
};

exports.refreshToken = (req, res) => {
  const { token } = req.body || {};

  if (!token || !refreshTokens.has(token)) {
    return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refreshToken' });
  }

  jwt.verify(token, refreshSecret, (err, user) => {
    if (err) return res.status(403).json({ message: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' });

    const newAccessToken = jwt.sign({ id: user.id, role: user.role }, jwtSecret, {
      expiresIn: tokenExpire,
    });
    res.json({ accessToken: newAccessToken });
  });
};


exports.logout = (req, res) => {
  const { token } = req.body;
  refreshTokens.delete(token);
  res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
};

function generateTokens(payload) {
  const accessToken = jwt.sign(payload, jwtSecret, { expiresIn: tokenExpire });
  const refreshToken = jwt.sign(payload, refreshSecret, { expiresIn: refreshExpire });
  refreshTokens.add(refreshToken);
  return { accessToken, refreshToken };
}
