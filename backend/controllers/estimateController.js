const {
  createEstimate,
  getEstimatesByObject,
  getEstimateById,
  updateEstimate,
  deleteEstimate,
} = require('../models/estimateModel');
const logHistory = require('../utils/logHistory');

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã
exports.create = async (req, res) => {
  const { object_id, name } = req.body;

  if (!object_id || !name) {
    return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–±—ä–µ–∫—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã' });
  }

  try {
    const id = await createEstimate({ object_id, name, created_by: req.user.id });
    await logHistory('estimate', id, '–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã', req.user.id);
    res.status(201).json({ id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ—Ç—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã' });
  }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–º–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É
exports.getByObject = async (req, res) => {
  const { objectId } = req.params;

  try {
    const estimates = await getEstimatesByObject(objectId);
    res.json(estimates);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ—Ç:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç' });
  }
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã
exports.update = async (req, res) => {
  const { id } = req.params;
  const { name, status } = req.body;

  try {
    await updateEstimate({ id, name, status });
    await logHistory('estimate', id, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã', req.user.id);
    res.json({ message: '–°–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–º–µ—Ç—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã
exports.remove = async (req, res) => {
  const { id } = req.params;

  try {
    await deleteEstimate(id);
    await logHistory('estimate', id, '–£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã', req.user.id);
    res.json({ message: '–°–º–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–º–µ—Ç—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
  }
};
