const {
  getObjectsByUser,
  createObject,
  updateObject,
  getObjectById,
  attachForeman,
  detachForeman,
} = require('../models/objectModel');

const logHistory = require('../utils/logHistory');

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getAll = async (req, res) => {
  try {
    const objects = await getObjectsByUser(req.user);
    res.json(objects);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤' });
  }
};

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
exports.create = async (req, res) => {
  const { name, description } = req.body;

  try {
    const id = await createObject({
      name,
      description,
      created_by: req.user.id,
    });

    await attachForeman(req.user.id, id);
    await logHistory(req.user.id, id, '–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞');

    res.status(201).json({ id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞' });
  }
};

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
exports.update = async (req, res) => {
  const { id } = req.params;
  const { name, description } = req.body;

  try {
    const object = await getObjectById(id);

    if (req.user.role === 'foreman' && object.created_by !== req.user.id) {
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞' });
    }

    await updateObject({ id, name, description });
    await logHistory(req.user.id, id, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞');

    res.json({ message: '–û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};

// üîπ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ä–∞–±–∞
exports.assignForeman = async (req, res) => {
  const { userId, objectId } = req.body;

  try {
    await attachForeman(userId, objectId);
    await logHistory(req.user.id, objectId, `–ù–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ—Ä–∞–± user_id=${userId}`);
    res.json({ message: '–ü—Ä–æ—Ä–∞–± –Ω–∞–∑–Ω–∞—á–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ—Ä–∞–±–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' });
  }
};

// üîπ –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–æ—Ä–∞–±–∞
exports.unassignForeman = async (req, res) => {
  const { userId, objectId } = req.body;

  try {
    await detachForeman(userId, objectId);
    await logHistory(req.user.id, objectId, `–û—Ç–∫—Ä–µ–ø–ª—ë–Ω –ø—Ä–æ—Ä–∞–± user_id=${userId}`);
    res.json({ message: '–ü—Ä–æ—Ä–∞–± –æ—Ç–∫—Ä–µ–ø–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ä–∞–±–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è' });
  }
};
