require('dotenv').config();
const pool = require('../config/db');

const estimateItemSamples = [
  [27, "–ú–æ–Ω—Ç–∞–∂ –∫–∞–±–µ–ª—å-–∫–∞–Ω–∞–ª–∞ 25x16", "–º", 45.00, 30.00, "—Ä–∞–±–æ—Ç–∞"],
  [27, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥—Ä–æ–∑–µ—Ç–Ω–∏–∫–æ–≤", "—à—Ç", 30.00, 25.00, "—Ä–∞–±–æ—Ç–∞"],
  [27, "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –í–í–ì–Ω–≥ 3x2.5", "–º", 32.00, 30.00, "–º–∞—Ç–µ—Ä–∏–∞–ª"],
  [29, "–ú–æ–Ω—Ç–∞–∂ –£–ó–û", "—à—Ç", 200.00, 180.00, "—Ä–∞–±–æ—Ç–∞"],
  [29, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —â–∏—Ç–∫–∞", "—à—Ç", 700.00, 650.00, "—Ä–∞–±–æ—Ç–∞"],
  [29, "–®—Ç—Ä–æ–±–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω", "–º", 90.00, 80.00, "—Ä–∞–±–æ—Ç–∞"],
  [31, "–°–±–æ—Ä–∫–∞ –í–†–£", "—à—Ç", 1500.00, 1400.00, "—Ä–∞–±–æ—Ç–∞"],
  [31, "–ú–æ–Ω—Ç–∞–∂ –≥–æ—Ñ—Ä—ã", "–º", 20.00, 18.00, "–º–∞—Ç–µ—Ä–∏–∞–ª"],
  [31, "–ó–∞–∑–µ–º–ª–µ–Ω–∏–µ", "—à—Ç", 250.00, 230.00, "—Ä–∞–±–æ—Ç–∞"],
  [33, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é—Å—Ç—Ä", "—à—Ç", 300.00, 280.00, "—Ä–∞–±–æ—Ç–∞"],
  [33, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–∑–µ—Ç–æ–∫", "—à—Ç", 150.00, 140.00, "—Ä–∞–±–æ—Ç–∞"],
  [33, "–ú–æ–Ω—Ç–∞–∂ —Ä–æ–∑–µ—Ç–æ–∫ —Å –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ–º", "—à—Ç", 120.00, 100.00, "—Ä–∞–±–æ—Ç–∞"],
  [35, "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è –ö–ì", "–º", 70.00, 65.00, "–º–∞—Ç–µ—Ä–∏–∞–ª"],
  [35, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤", "—à—Ç", 90.00, 85.00, "—Ä–∞–±–æ—Ç–∞"],
  [35, "–ü–∞–π–∫–∞ –ø—Ä–æ–≤–æ–¥–æ–≤", "–º", 50.00, 45.00, "—Ä–∞–±–æ—Ç–∞"],
  [27, "–ú–æ–Ω—Ç–∞–∂ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤", "—à—Ç", 250.00, 230.00, "—Ä–∞–±–æ—Ç–∞"],
  [29, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –£–ó–û", "—à—Ç", 200.00, 190.00, "—Ä–∞–±–æ—Ç–∞"],
  [31, "–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Å–∏–ª–æ–≤—ã—Ö –ª–∏–Ω–∏–π", "–º", 95.00, 90.00, "—Ä–∞–±–æ—Ç–∞"],
  [33, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏", "—à—Ç", 180.00, 170.00, "—Ä–∞–±–æ—Ç–∞"],
  [35, "–ú–æ–Ω—Ç–∞–∂ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Ä–æ–±–æ–∫", "—à—Ç", 90.00, 85.00, "—Ä–∞–±–æ—Ç–∞"]
];

async function seed() {
  const conn = await pool.getConnection();

  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...');
    await conn.query('DELETE FROM Tasks');
    await conn.query('DELETE FROM EstimateItems');
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    console.log('üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π EstimateItems...');
    const estimateItemIds = [];

    for (const item of estimateItemSamples) {
      const [result] = await conn.execute(
        `INSERT INTO EstimateItems (estimate_id, name, unit, price, adjusted_price, category)
         VALUES (?, ?, ?, ?, ?, ?)`,
        item
      );
      estimateItemIds.push({ id: result.insertId, estimate_id: item[0] });
    }

    console.log('üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á Tasks (–≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã)...');
    for (const { id: estimateItemId, estimate_id } of estimateItemIds) {
      const quantity = Math.floor(Math.random() * 20) + 5;
      const percent = [70, 80, 90, 100][Math.floor(Math.random() * 4)];
      const comment = '';
      const status = 'created';

      await conn.execute(
        `INSERT INTO Tasks (estimate_item_id, estimate_id, quantity, percent, comment, status)
         VALUES (?, ?, ?, ?, ?, ?)`,
        [estimateItemId, estimate_id, quantity, percent, comment, status]
      );
    }

    console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', err);
  } finally {
    conn.release();
    process.exit();
  }
}

seed();
